# handlers/common_handlers.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold

from keyboards.inline import get_main_settings_keyboard
from states.user_states import SettingsStates
from config import DEFAULT_LANGUAGE, DEFAULT_SUMMARY_STYLE, SUPPORTED_LANGUAGES, SUMMARY_STYLES

router = Router()


def get_user_settings(user_id: int, dp_user_settings: dict):
    if user_id not in dp_user_settings:
        dp_user_settings[user_id] = {
            "language": DEFAULT_LANGUAGE,
            "summary_style": DEFAULT_SUMMARY_STYLE,
            "summary_style_name": SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE]["name"]
        }
    elif 'summary_style_name' not in dp_user_settings[user_id]:
        current_style_key = dp_user_settings[user_id].get('summary_style', DEFAULT_SUMMARY_STYLE)
        dp_user_settings[user_id]['summary_style_name'] = \
            SUMMARY_STYLES.get(current_style_key, SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE])["name"]
    return dp_user_settings[user_id]


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, user_settings: dict, whisper_model: tuple):
    await state.clear()
    current_user_settings = get_user_settings(message.from_user.id, user_settings)

    user_name = message.from_user.first_name or "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    _, device = whisper_model

    current_summary_style_name = current_user_settings.get(
        'summary_style_name',
        SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE]["name"]
    )

    text = (
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {hbold(user_name)}!\n\n"
        "–Ø —Ç–≤—ñ–π –Ü–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π —É–º—ñ—î:\n"
        "1Ô∏è‚É£ üó£Ô∏è –ü—Ä–∏–π–º–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ (.ogg) —Ç–∞ –∞—É–¥—ñ–æ (.mp3, .wav —Ç–æ—â–æ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        "2Ô∏è‚É£ ‚úçÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞—Ç–∏ —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Whisper.\n"
        "3Ô∏è‚É£ üí° –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–∏—Å–ª–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM.\n\n"
        f"üîπ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó: {hbold(SUPPORTED_LANGUAGES.get(current_user_settings['language'], '–ê–≤—Ç–æ'))}\n"
        f"üîπ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∏–ª—å –ø—ñ–¥—Å—É–º–∫—É: {hbold(current_summary_style_name)}\n"
        f"üî¨ Whisper –ø—Ä–∞—Ü—é—î –Ω–∞: {hbold(device.upper())}\n\n"
        "‚û°Ô∏è –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ, –∞—É–¥—ñ–æ –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏.\n"
        "‚öôÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /settings –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."
    )
    await message.answer(text)


@router.message(Command("help"))
async def cmd_help(message: types.Message, user_settings: dict):
    current_user_settings = get_user_settings(message.from_user.id, user_settings)
    current_lang_name = SUPPORTED_LANGUAGES.get(current_user_settings['language'], "–ê–≤—Ç–æ")

    current_style_key = current_user_settings.get('summary_style', DEFAULT_SUMMARY_STYLE)
    current_style_name = SUMMARY_STYLES.get(current_style_key, SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE])["name"]

    text = (
        "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "üìù <b>–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
        "- –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö —Ç–∞ –∞—É–¥—ñ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.\n"
        "- –°—Ç–∏—Å–ª–∏–π –ø—ñ–¥—Å—É–º–æ–∫ (—Ä–µ–∑—é–º–µ) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–æ–≤–∞–Ω–æ–≥–æ –∞–±–æ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.\n\n"
        "üé§ <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:</b>\n"
        "1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑–∞–ø–∏—Å —ñ–∑ Telegram) –∞–±–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª.\n"
        "2. –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Å—É–º—É–≤–∞—Ç–∏.\n"
        "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç —ñ –Ω–∞–¥—ñ—à–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (/settings):</b>\n"
        f"- <b>–ú–æ–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó:</b> –ó–∞—Ä–∞–∑ ‚Äî \"{current_lang_name}\". –í–ø–ª–∏–≤–∞—î –Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.\n"
        f"- <b>–°—Ç–∏–ª—å –ø—ñ–¥—Å—É–º–∫—É:</b> –ó–∞—Ä–∞–∑ ‚Äî \"{current_style_name}\". –í–∏–∑–Ω–∞—á–∞—î —Ä—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó.\n\n"
        "‚ùå <b>–°–∫–∞—Å—É–≤–∞–Ω–Ω—è:</b> –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –¥–µ—è–∫—ñ –¥—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–±—ñ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å)."
    )
    await message.answer(text)


@router.message(Command("settings"))
async def cmd_settings(message: types.Message, state: FSMContext):
    await state.set_state(SettingsStates.MAIN_SETTINGS_MENU)
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
        reply_markup=get_main_settings_keyboard()
    )


@router.callback_query(F.data == "settings:close", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_settings_close(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üëå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")
    await callback.answer()


@router.message(Command("cancel"))
@router.callback_query(F.data == "cancel_state")
async def cmd_cancel(event: types.Message | types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        text = "ü§∑ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)
        return

    await state.clear()
    text = "‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
    if isinstance(event, types.Message):
        await event.answer(text)
    elif isinstance(event, types.CallbackQuery) and event.message:
        try:
            await event.message.edit_text(text)
        except Exception:
            await event.message.answer(text)
        await event.answer()


@router.message(F.text.startswith('/'))
async def unhandled_command_fallback(message: types.Message):
    await message.reply("üòï –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start –∞–±–æ /help.")
